package designpatterns.twentytwo;

import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Properties;

public class PurchaseFacade {
	private String name;
	private BigDecimal price;
	private float weight;
	private float capacity;

	private String head;
	private Date date;

	private String details;
	private String description;

	public void setName(String name) {
		this.name = name;
	}
	public void setPrice(BigDecimal price) {
		this.price = price;
	}
	public void setWeight(float weight) {
		this.weight = weight;
	}
	public void setCapacity(float capacity) {
		this.capacity = capacity;
	}
	public void setHead(String head) {
		this.head = head;
	}
	public void setDate(Date date) {
		this.date = date;
	}
	public void setDetails(String details) {
		this.details = details;
	}
	public void setDescription(String description) {
		this.description = description;
	}

	public boolean savePurchaseData(){
		Item item;
		Header header;
		Details detail;

		boolean validData = true;
		String errorMessage = "";

		item = new Item(name, price, weight, capacity);
		if(item.isValid() == false){
			validData = false;
			errorMessage = "Invalid weight/capacity.";
		}
		header = new Header(head, date);
		if(header.isValid() == false){
			validData = false;
			errorMessage += " Invalid head/date. "; 
		} 
		detail = new Details(details, description);
		if(detail.isValid() == false){
			validData = false;
			errorMessage += " Invalid details, description. ";
		}
		if(!validData){
			System.out.println(errorMessage);
		}
		if(item.save() && header.save() && detail.save()){
			return true;
		} else {
			return false;
		}
	}

	public boolean getDataFromPropertiesFile() throws ParseException{
		Properties p = new Properties();
		boolean result = false;
		try {
			p.load(new FileInputStream("purchase.properties"));
			name = p.getProperty("name");
			price = new BigDecimal(p.getProperty("price"));
			weight = Float.valueOf(p.getProperty("weight"));
			capacity = Float.valueOf(p.getProperty("weight"));
			head = p.getProperty("head");
			date = convertFromStringToSqlDate(p.getProperty("date"));
			details = p.getProperty("date");;
			description = p.getProperty("date");
			result = true;
		} catch (IOException e) {
			e.printStackTrace();
		} 
		return result;
	}

	private Date convertFromStringToSqlDate(String strData) throws ParseException{
		SimpleDateFormat sdf1 = new SimpleDateFormat("MM-dd-yyyy");
		java.util.Date date = sdf1.parse(strData);
		java.sql.Date sqlStartDate = new Date(date.getTime());
		return sqlStartDate;
	}

}
